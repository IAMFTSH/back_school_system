<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>root</artifactId>
        <groupId>graduation.project</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>student</artifactId>

    <dependencies>

        <dependency>
            <groupId>graduation.project</groupId>
            <artifactId>config</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!--自动构建代码-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
            <version>3.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-engine-core</artifactId>
            <version>2.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
    </dependencies>
    <build>
        <plugins>
<!--            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>

                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;
                <executions>
                    <execution>
                        <id>build-image</id>
                        &lt;!&ndash;将插件绑定在package这个phase上。也就是说，
                        用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    &lt;!&ndash;指定生成的镜像名,这里是我们的项目名&ndash;&gt;
                    <imageName>aaaaa_${project.artifactId}</imageName>
                    &lt;!&ndash;指定标签 这里指定的是镜像的版本，我们默认版本是latest&ndash;&gt;
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    &lt;!&ndash; 指定我们项目中Dockerfile文件的路径&ndash;&gt;
                    <dockerDirectory>${project.basedir}/src/main/resources</dockerDirectory>

                    &lt;!&ndash;指定远程docker 地址&ndash;&gt;
                    <dockerHost>http://59.110.68.237:2375</dockerHost>

                    &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            &lt;!&ndash;jar包所在的路径  此处配置的即对应项目中target目录&ndash;&gt;
                            <directory>${project.basedir}/target</directory>
                            &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin </artifactId>
                <configuration>
                    <fork>true</fork>
                    <mainClass>graduation.project.Student</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>

    </build>
</project>